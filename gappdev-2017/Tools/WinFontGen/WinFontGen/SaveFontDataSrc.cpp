/////////////////////////////////////////////////////////////////////////////////////////////
// SaveFontDataSrc.cpp
// 
// Saving Font Data As C++ Code
// 
/////////////////////////////////////////////////////////////////////////////////////////////

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string>
#include <algorithm>
#include "Font/WinGDIFontGen.h"

bool is_space_char_func(char c) { return c == ' '; }
char set_lower_char(char c) { return (c>=65 && c<=90) ? (c+32) : (c);}

/////////////////////////////////////////////////////////////////////////////////////////////
bool SaveFontDataAsSrcFile(const char *font_name, const SymbolData *pSymbolsdata)
{
	std::string strfontname(font_name);
	
	std::replace_if(strfontname.begin(),strfontname.end(),is_space_char_func,'_');
	std::transform(strfontname.begin(),strfontname.end(),strfontname.begin(),set_lower_char);

	uint fontsize = pSymbolsdata->FontSize;
	char tmpbuf[256]={0};
	itoa((int)fontsize,tmpbuf,10);

	std::string strfullfontname("font_");
	strfullfontname += strfontname;
	strfullfontname += "_";
	strfullfontname += std::string(tmpbuf);

	std::string strfilename(strfullfontname);
	strfilename += ".h";
	FILE *file = fopen(strfilename.c_str(),"wb");
	if(!file) return false;

	std::string strheaderinfo("File Automatically Generated By WinGDIFontGen");
	std::string strlongcomm;
	strlongcomm.append(80,'/');

	std::string strnewline("\r\n");

	//Writing Header Info
	fwrite(strlongcomm.c_str(),strlongcomm.size(),1,file);
	fwrite("\r\n",2,1,file);
	fwrite("//  ",4,1,file);
	fwrite(strfilename.c_str(),strfilename.size(),1,file);
	fwrite(strnewline.c_str(),strnewline.size(),1,file);
	fwrite("//  ",4,1,file);
	fwrite("\r\n",2,1,file);
	fwrite("//  ",4,1,file);
	fwrite(strheaderinfo.c_str(),strheaderinfo.size(),1,file);
	fwrite("\r\n",2,1,file);
	fwrite(strlongcomm.c_str(),strlongcomm.size(),1,file);
	fwrite("\r\n",2,1,file);
	fwrite("\r\n",2,1,file);

	std::string strfirstchar("const unsigned int ");
	strfirstchar += strfullfontname;
	strfirstchar += "_firstchar = ";
	itoa((int)pSymbolsdata->FirstSymbol,tmpbuf,10);
	strfirstchar += tmpbuf;
	strfirstchar += ";";

	fwrite(strfirstchar.c_str(),strfirstchar.size(),1,file);
	fwrite("\r\n",2,1,file);
	fwrite("\r\n",2,1,file);
	
	/////
	std::string strlastchar("const unsigned int ");
	strlastchar += strfullfontname;
	strlastchar += "_lastchar = ";
	itoa((int)pSymbolsdata->LastSymbol,tmpbuf,10);
	strlastchar += tmpbuf;
	strlastchar += ";";

	fwrite(strlastchar.c_str(),strlastchar.size(),1,file);
	fwrite("\r\n",2,1,file);
	fwrite("\r\n",2,1,file);

	//Writing Symbols Sizes
	std::string strsizestabname("const unsigned int ");
	strsizestabname += strfullfontname;
	strsizestabname += "_charsizes [][3] = ";
	fwrite(strsizestabname.c_str(),strsizestabname.size(),1,file);
	fwrite("\r\n",2,1,file);
	fwrite("{",1,1,file);

	uint symbolscnt = pSymbolsdata->LastSymbol - pSymbolsdata->FirstSymbol + 1;
	uint subtabidx = 0;
	const uint *psizes = pSymbolsdata->pSymbSizes;
	for(uint i = 0; i < symbolscnt; i++)
	{
		if((subtabidx%10)==0) {
			fwrite("\r\n",2,1,file);
			fwrite("    ",4,1,file);
		}
		
		
		std::string strvals("{");
		itoa(*psizes,tmpbuf,10);
		strvals += tmpbuf;
		strvals += ",";
		psizes++;
		itoa(*psizes,tmpbuf,10);
		strvals += tmpbuf;
		strvals += ",";
		psizes++;
		itoa(*psizes,tmpbuf,10);
		strvals += tmpbuf;
		strvals += "}, ";
		psizes++;
		fwrite(strvals.c_str(),strvals.size(),1,file);

		subtabidx++;
	}

	fwrite("\r\n",2,1,file);
	fwrite("};",2,1,file);
	fwrite("\r\n",2,1,file);
	fwrite("\r\n",2,1,file);

	//Writing Symbols Bitmaps


	fclose(file);
	
	return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////