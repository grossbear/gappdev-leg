/////////////////////////////////////////////////////////////////////////////////////////////
// FontDataSrcSaver.cpp
// 
// Saving Font Data As C++ Source Header
// 
/////////////////////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <string>
#include <algorithm>

#include "FontDataSrcSaver.h"

/////////////////////////////////////////////////////////////////////////////////////////////
bool CFontDataSrcSaver::GenSrcFile(const char *path, const char *fontname, const SymbolsData *symbobj)
{
    std::string strfontname = SetFontName(fontname,symbobj->FontSize);
    FILE *file = OpenSrcFile(path,strfontname.c_str());
    if(!file) 
        return false;

    uint symbcnt = symbobj->LastSymbol - symbobj->FirstSymbol + 1;

    WriteHeaderInfo(file,strfontname.c_str());
    WriteUIntValue(file,strfontname.c_str(),"firstchar",symbobj->FirstSymbol);
    WriteUIntValue(file,strfontname.c_str(),"lastchar",symbobj->LastSymbol);
    WriteUIntValue(file,strfontname.c_str(),"fontsize",symbobj->FontSize);
    WriteUIntValue(file,strfontname.c_str(),"spacewidth",symbobj->SpaceWidth);
    WriteSizesData(file,strfontname.c_str(),symbobj->pSymbSizes,symbcnt);
    WriteFontBitmapData(file,strfontname.c_str(),symbobj);

    fclose(file);
    return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////
std::string CFontDataSrcSaver::SetFontName(const char *fontname, uint fontsize)
{
    std::string strfontname(fontname);
    std::transform(strfontname.begin(),strfontname.end(),strfontname.begin(),to_lower);
    strfontname = "font " + strfontname;

    char tmpbuf[32]={0};
    _itoa_s(fontsize,tmpbuf,32,10);
    strfontname += " ";
    strfontname += tmpbuf;
   
    std::replace_if(strfontname.begin(),strfontname.end(),is_space_char_func,'_');

    return strfontname;
}

/////////////////////////////////////////////////////////////////////////////////////////////
FILE* CFontDataSrcSaver::OpenSrcFile(const char *path, const char *fontname)
{
    std::string strpath = (path==NULL) ? ("") : (path);
    if(!strpath.empty()) 
    {
        size_t size = strpath.size();
        if(strpath[size-1] != char('/') || strpath[size-1] != char('\\')) {
            strpath.push_back('/');
        }
    }

    std::string strfilename = strpath + fontname;
    strfilename += ".h";

    FILE *file = NULL;
    errno_t error = fopen_s(&file,strfilename.c_str(),"wb");

    return file;
}

/////////////////////////////////////////////////////////////////////////////////////////////
void CFontDataSrcSaver::WriteHeaderInfo(FILE *file, const char *fontname)
{
    std::string strappinfo("File Automatically Generated By WinGDIFontGen");
	std::string strlongcomm;
	strlongcomm.append(80,'/');

    std::string strheader = strlongcomm + "\r\n";
    strheader += "//  ";
    strheader += fontname; 
    strheader += ".h\r\n";
    strheader += "//\r\n";
    strheader += "//  ";
    strheader += strappinfo + "\r\n";
    strheader += strlongcomm;
    strheader += "\r\n\r\n";

    fwrite(strheader.c_str(),strheader.size(),1,file);
}

/////////////////////////////////////////////////////////////////////////////////////////////
void CFontDataSrcSaver::WriteUIntValue(FILE *file, const char *fontname, const char *valname, uint value)
{
    std::string strdata("const unsigned int ");
    strdata += fontname;
    strdata += "_";
    strdata += valname;
    strdata += " = ";

    char tmpbuf[32]={0};
    _itoa_s(value,tmpbuf,32,10);
    strdata += tmpbuf;
    strdata += ";\r\n\r\n";

    fwrite(strdata.c_str(),strdata.size(),1,file);
}

/////////////////////////////////////////////////////////////////////////////////////////////
void CFontDataSrcSaver::WriteSizesData(FILE *file, const char *fontname, const uint *pSizes, uint count)
{
    std::string strdata("const unsigned int ");
    strdata += fontname;
    strdata += "_";
    strdata += "sizes[][3] = ";
    strdata += "\r\n{";

	const uint *pdata = pSizes;
	char tmpbuf[32] = {0};
	for(uint i = 0; i < count; i++) 
	{
		if(!(i%8)) {
			if(i!=count-1)
				strdata += "\r\n    ";
		}
		strdata += "{";
		_itoa_s(pdata[0],tmpbuf,32,10);
		strdata += tmpbuf;
		strdata += ",";
		_itoa_s(pdata[1],tmpbuf,32,10);
		strdata += tmpbuf;
		strdata += ",";
		_itoa_s(pdata[2],tmpbuf,32,10);
		strdata += tmpbuf;
		strdata += "}, ";
		pdata += 3;
	}

    strdata += "\r\n};\r\n\r\n";

    fwrite(strdata.c_str(),strdata.size(),1,file);
}

/////////////////////////////////////////////////////////////////////////////////////////////
void CFontDataSrcSaver::WriteFontBitmapData(FILE *file, const char *fontname, const SymbolsData *symbobj)
{
    std::string strdata("const unsigned char ");
    strdata += fontname;
    strdata += "_";
    strdata += "data[] = ";
    strdata += "\r\n{";
    fwrite(strdata.c_str(),strdata.size(),1,file);

	uint symbcnt = symbobj->LastSymbol - symbobj->FirstSymbol + 1;
	const uint *pSizes = symbobj->pSymbSizes;
    const ubyte *pSymbData = symbobj->pSymbBits;

    for(uint i = 0; i < symbcnt; i++)
    {
        uint swidth = pSizes[0];
        uint sheight = pSizes[1];
        pSizes += 3;
        uint symbol = symbobj->FirstSymbol + i;
        strdata = PrintSymbolCode(symbol);
        fwrite(strdata.c_str(),strdata.size(),1,file);
        for(uint y = 0; y < sheight; y++)
        { 
            strdata = PrintSymbolDataLine(pSymbData,swidth);
            fwrite(strdata.c_str(),strdata.size(),1,file);
            pSymbData += swidth;
        }
    }

    strdata += "};";

    fwrite(strdata.c_str(),strdata.size(),1,file);
}

/////////////////////////////////////////////////////////////////////////////////////////////
std::string CFontDataSrcSaver::PrintSymbolCode(uint symbol)
{ 
    char buffer[256]={0};
    sprintf_s(buffer,256,"\r\n    //  Symbol Code: 0x%X\r\n",symbol);
    std::string strdata(buffer);
    return strdata;
}
/////////////////////////////////////////////////////////////////////////////////////////////
std::string CFontDataSrcSaver::PrintSymbolDataLine(const ubyte *pdata, uint width)
{
    std::string strdata;
    strdata.append(4,' ');
    char buffer[32]={0};
    for(uint i = 0; i < width; i++)
    {
        sprintf_s(buffer,32,"0x%X",pdata[i]);
        strdata += buffer;
        strdata += ",";
        if(pdata[i]<16) strdata.append(1,' ');
    }
    strdata += "\r\n";
    
    return strdata;
}

/////////////////////////////////////////////////////////////////////////////////////////////