///////////////////////////////////////////////////////////////////////////////////////
//  Sqrt.h
//
//  Square Root Function Calculation Methods Declarations
//  
//
///////////////////////////////////////////////////////////////////////////////////////

#ifndef _SQRT_H_
#define _SQRT_H_

M_INLINE float msqrt(float x);
///////////////////////////////////////////////////////////////////////////////////////
M_INLINE double msqrt(double x);
///////////////////////////////////////////////////////////////////////////////////////
M_INLINE float mrsqrt(float x);
///////////////////////////////////////////////////////////////////////////////////////
M_INLINE double mrsqrt(double x);


float m_tsqrt(float x);
///////////////////////////////////////////////////////////////////////////////////////
float m_rtsqrt(float x);
///////////////////////////////////////////////////////////////////////////////////////
float m_fsqrt(float x);
///////////////////////////////////////////////////////////////////////////////////////
float m_rfsqrt(float x);
///////////////////////////////////////////////////////////////////////////////////////
float m_asqrt(float x);


///////////////////////////////////////////////////////////////////////////////////////
M_INLINE float msqrt(float x)
{
#ifdef CMATH_TABLE_SQRT
    return m_tsqrt(x);
#elif CMATH_FAST_SQRT
    return m_fsqrt(x);
#else
    return sqrtf(x);
#endif
}
///////////////////////////////////////////////////////////////////////////////////////
M_INLINE double msqrt(double x)
{
    return sqrt(x);
}
///////////////////////////////////////////////////////////////////////////////////////
M_INLINE float mrsqrt(float x)
{
    //--ASSERT(!mnear0(x) && x > 0.0f);
    ASSERT( x >= 0.0f);

    if (mnear0(x))
        return 0.0f;
    
#ifdef CMATH_TABLE_SQRT
    return 1.0f/m_tsqrt(x);
#elif CMATH_FAST_SQRT
    return m_rfsqrt(x);
#else
    return 1.0f/sqrtf(x);
#endif
}
///////////////////////////////////////////////////////////////////////////////////////
M_INLINE double mrsqrt(double x)
{
    //--ASSERT(!mnear0(x) && x > 0.0);
    ASSERT(x >= 0.0);
    if (mnear0(x))
        return 0.0;

    return 1.0/sqrt(x);
}


///////////////////////////////////////////////////////////////////////////////////////
M_INLINE float msumsqrt(float x, float y)
{
#ifdef CMATH_TABLE_SQRT
    return m_tsqrt(x*x + y*y);
#elif CMATH_FAST_SQRT
    return m_fsqrt(x*x + y*y);
#else
    return sqrtf(x*x + y*y);
#endif
}
///////////////////////////////////////////////////////////////////////////////////////
M_INLINE double msumsqrt(double x, double y)
{
    return sqrt(x*x + y*y);
}
///////////////////////////////////////////////////////////////////////////////////////
M_INLINE float msumrsqrt(float x, float y)
{
    float sum = x*x + y*y;
    ASSERT(sum >= 0.0f);

    if(mnear0(sum))
        return 0.0f;

#ifdef CMATH_TABLE_SQRT
    return 1.0f/m_tsqrt(sum);
#elif CMATH_FAST_SQRT
    return m_rfsqrt(sum);
#else
    return 1.0f/sqrtf(sum);
#endif
}

///////////////////////////////////////////////////////////////////////////////////////
M_INLINE double msumrsqrt(double x, double y)
{
    double sum = x*x + y*y;
    ASSERT(sum >= 0.0);

    if(mnear0(sum))
        return 0.0;

    return 1.0/sqrt(x*x + y*y);
}

///////////////////////////////////////////////////////////////////////////////////////
M_INLINE float m_tsumsqrt(float x, float y)
{
    return m_tsqrt(x*x + y*y);
}
///////////////////////////////////////////////////////////////////////////////////////
M_INLINE float m_tsumrsqrt(float x, float y)
{
    return m_rtsqrt(x*x + y*y);
}
///////////////////////////////////////////////////////////////////////////////////////
M_INLINE float m_fsumsqrt(float x, float y)
{
    return m_fsqrt(x*x + y*y);
}
///////////////////////////////////////////////////////////////////////////////////////
M_INLINE float m_fsumrsqrt(float x, float y)
{
    return m_rfsqrt(x*x + y*y);
}

///////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////


#endif //_SQRT_H_